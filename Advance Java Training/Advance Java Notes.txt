1. Daemon THread --> 

psvm(String args[]){

 	new Thread() {	
	{
	//	setName("My Thread");
		setDaemon(true);
	}
	
	@override
	public void run() {
		sysouet("This thread name is : " + Thread.currentThread().getName());
	
		try{
			Thread.sleep(5000);
		} catch (InterruptedException ex){
			hrow new untimeException(ex);
		}
	}
}.start();

sysout("Thread : " + Thread.currentThread().getName());


}


2. Canonicalisation -> String immutability. Integer default -127 to 127 (cached objects) 
Integer int1 = 25; Integer int2 = 25; int1==int2 (true) --> fetched from cache and no new onj is created
Integer int1 = 250; Integer int2 = 250; int1==int2 (false) --> new object

3. Objects referred from outof heap are referred as root objects by GC.

4. Stack , Heap, Non Heap area

5. Tracing Collector --> all collectors in java are tracing collector. GC from root starts tracing the linked objects mark them reachable.

6. java.nio --> very good. ByteBuffer bf = ByteBuffer.allocateDirect(300000) --> allocate memory off Heap space (outside heap). 
						ByteBuffer.allocate(300000) --> within heap
					bf.put("anythin") --> many utility methods to write/read data from buffer.
					Many servers are written on top of nio library which provides support for IO operations.

7. jconsole, Eclise Memeory Analyzer Tool.
8. jps --> to find PIDs.  jmap to create heap. Use Eclipse MAT to analyze the heap.
9. BofA uses AppDynamics, other are Dynatrace, jprobe
10. Thread states --> NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED
11. Read Barrier Write Barrier
12. JVM controls allowing thrreads to enter synchronized blocks. How? Do they spin on lock? do they keep running and checking if synchronized block is available to enter. Kepp Lock count? or just when lock!=0 and suspend the thread (Low context switching).v Lock stripping.
12. Context Switching ( cause poor performance). knowledge check: AMDHALS Law 
13. wait and notify --> system ad
14. Reference Knowledge: Synchronization and java memory model -> Dough Lea with small example
15. Important: Use while instead of if to check condition to call wait(). To overcome surious call. Like notify is called when it was not intended to. 
public void synchronized put(String value){
	while(list.size == max_size){
		try{ 
			this.wait();
		}catch(InterruptedExceptions ex){
			throe new RuntimeException(ex);		
		}
		values.add(value)
	}
}

public synchronized String take(){
	String value = values.remove();
	notify();
	return value;
} 

16. TIMED_WAITING --> wait(timeout) --> release the  lock or Thread.sleep(sleepTime) --> will not release the lock.
17. Interrupt and join both require reference of the thread. 
18. Join should not be called on current thread as it will block current thread.
19. ThreadLocal --> keep state at thread level. T1 --> threadLocal.setValue("thread1") ; T2 --> threadLocal.setValue("thread2")
T1 --> threadLocal.getvalue() --> t1  while in T2 --> it will return t2.  (same reference of threadLocal maintain state at thread level)
20. session per thread youtube Hibernateession in jpa muhammad shakir
21. :Let JVM warm up. 
22. Elision
23. java.util.concurrent.Lock --> instead 
24. JCP --> Java Community Process -> JSRs
25. Deadlocks --> jconsole --> threads --> Detect Deadlock
26. Deadlock through stack trace --> command prompt --> jps to find pid --> jstack <pid>  will show u stacktrace with deadlock information
27. Locks --> eg ReentrantLock. It does not use synchronization. Different mechanism. Ready made solutions to acquier lock and notfy waiting threads. java.util.concurrent.lock.Condition instead of wait and notify. Condition.await() and Condition.signal(). Because wait and notify will work with synchronized keyword (native implementation) else they will through IllegalStateMonitorException. While Lock API uses java logic to manage synchronization. Look into Lock api implementation.
28. Multiple reads, few writes. --> read should not block other reads if the state is not modified. 
ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
Lock writeLock = readwritelock.writeLock();
Lock readLock = readWriteLock.readLock(); 
29. Java Concurrent animated. by Victor Grazi --visualizer api jar download.
30. Carrier Advice --> know about Functional Java In and Out. Learn Scala (framework)--> very important
31. BlockingQueue --> ArrayBlockingQueue Thread Safe datastructure. No need to use any synchronisation or locking mechanism. 
32. ThreadPoolExecutor --> use to create pool of threads.
33. Callable vs Runnable. Runnable does not return any value nor throws any exception. Callable return as well as throws exception in call method. ExecutorService.submit(Callable callable)  returns Furutre object
34. Future Object --> future.get() --> throws ExecutionException, InterruptedException 
35. Video upload. (may be in any format .mov, .mp4, webm, .ogg etc) Javascript uploads the file from client to AWS - S3. AWS return file url and other details to client. Client pass the file details to application server. 
Applciation server will call encoding service with file details eg zencoder --> use for encoding the files. To make file available in different formats, different encoding is required eg .mov is uploaded by client, one need encoding it to .mp4, .webm, .ogg etc to make the file compatible with different clients(windows, Mac, Unix, mobile android, ipad, etc). this task is marked complete when all these encodings are complete which can be run parallel in executionservice.  Only after that a flag is set that file upload complete in database. 
36. Semaphore -->  
37. Atomic Variables
38. Cyclic Barriers --> use for parallelism. multiple threads with run and wait until all reach to same place. Example sorting, which can be broken into smaller tasks of same nature/type. that can be solved using recurssion.  
39. ForkJoinPool --> to introduce parallelism Has total number of thread that can be executed on ur machine. i,e total number of cores on one's machine.Works on Work Stealing Algorithm, RecusriveTask returns value, RecursiveAction does not return value.
40. Functional Interfaces. Outside Varibales used inside lambda expression should be effectively final. 
41. parallel stream. --> should be use with batch jobs or cron processes where we have few/one request creating parallel stream at a time. because parallel stream uses fork join pool that created threads for each core available. creating more parallel streams will use same fork join pool and add load to existing pool. this will degraed performance of parallel execution.
parallelstream is blocking when we use collect to list. 
42. CompletableFuture is non blocking as it runs on fork join pool but it do not have benefit of manipulating inputs like how streams does.
projectreactor.io --> api ( interacts with 3 api function api, completablefuture and streams)
duration --> api
ProjectorReactor --> Flux O(1|N) either of size of one or N. for huge data processing in parallel without blockinh the calling method/thread. During WebFlux uses
AKKA --> another framework. 
43. OPtional
44. Calendar --> not thread safe. when use to define timezone, ur application will work on only one time zone as. CalendargetInstance().setTimeZone() --> singleton object calendar.. time zone will be same 
Thread Safe --> LocalDate.now() and LocalTime.now(), ZonedDateTime.now() --> for current date/time/time with timezone.
LocalDate.of(2024, 11, 2) --> 2024-11-2
parse, getDayOfWeek, ZoneId
45. Base64

kirk pepperdine
ben evans
victor grazi
Heinz Kabuls
Gill Tene